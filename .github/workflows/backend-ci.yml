# Nom du workflow GitHub
name: Backend CI

# Définit quand le workflow sera déclenché
on:
  # Se déclenche lors d'un push sur la branche main ou les branches de test du workflow back
  push:
    branches:
      - main
      - workflow-test-*   # Toutes les branches commençant par workflow-test- suivi de n'importe quoi
    paths:
      - back/**
      - .github/workflows/backend-ci.yml
  # Se déclenche lors d'une PR vers la branche main
  pull_request:
    branches: [ main ]
    paths:
      - back/**
      - .github/workflows/backend-ci.yml
  # Permet de déclencher manuellement le workflow
  workflow_dispatch:

# Liste des jobs à exécuter
jobs:
  # Définition du job de tests backend
  backend-tests:
    # Utilise la dernière version d'Ubuntu comme environnement d'exécution
    runs-on: ubuntu-latest
    # Configure le répertoire de travail par défaut pour toutes les commandes
    defaults:
      run:
        working-directory: ./back

    # Liste des étapes à exécuter dans ce job
    steps:
      # Récupère le code source du dépôt
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Utile pour Sonar pour effectuer des comparaisons

      # Configure Java 11 pour l'environnement
      - name: Set up JDK 11
        uses: actions/setup-java@v4.7.1
        with:
          java-version: '11'     # Utiliser JDK 11 comme requis dans le projet
          distribution: 'adopt'
          cache: maven           # Active le cache Maven (survit à la destruction du container)
          cache-dependency-path: '**/pom.xml'  # Utilise un même chemin de dépendance pour partager le cache avec le job backend-sonar

      # compilation séparée pour plus de lisibilité (on distingue la partie compilation de l'exécution des tests)
      - name: Build project
        run: mvn compile test-compile #note : clean initial ne servirait pas puisque démarre vierge

      # Exécute les tests avec Maven (pas de tests d'intégration dans cette appli donc mvn verify inutile)
      - name: Run tests with Maven
        run: mvn test
        continue-on-error: false

      # Génère le rapport de couverture JaCoCo
      - name: Generate JaCoCo Report
        run: mvn jacoco:report

      # Upload rapport JaCoCo comme artefact => stocké dans infra github (sera utile au job Sonar)
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report    # Nom de l'artefact
          path: back/target/site/jacoco/  # Chemin vers les rapports
          retention-days: 1  # inutile de garder plus d'1 jour

      # Afficher le rapport et peut faire échouer PR éventuellement si en-dessous d'un seuil
      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v5.0
        with:
          coverage_results_path: back/target/site/jacoco/jacoco.xml
          coverage_report_name: backend-coverage
          coverage_report_title: JaCoCo Coverage Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false

      - name: Upload backend-classes # partagées avec job Sonar (classes compilées utiles indépendamment des src)
        uses: actions/upload-artifact@v4
        # if: always()  # Exécuter même si les étapes précédentes échouent
        with:
          name: backend-classes
          path: |
            back/target/classes
            back/target/test-classes
          retention-days: 1

      # Publie les résultats des tests JUnit
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'  # Chemin des rapports
          fail_on_failure: false

  # Job pour l'analyse SonarQube du backend
  backend-sonar:
    needs: [backend-tests]
    runs-on: ubuntu-latest
    continue-on-error: true  # Rend l'analyse SonarQube non bloquante

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Utile car permet à Sonar d'effectuer des comparaisons

      - name: Configuration JDK 17
        uses: actions/setup-java@v4.7.1
        with:
          java-version: '17'  # Version minimale obligatoire pour SonarQube
          distribution: 'adopt'
          cache: 'maven'
          cache-dependency-path: '**/pom.xml'

      # Récupération des artefacts générés lors des tests backend
      - name: Téléchargement du rapport JaCoCo
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          path: back/target/site/jacoco/

      - name: Téléchargement des classes backend
        uses: actions/download-artifact@v4
        with:
          name: backend-classes
          path: back/target/

      - name: Analyse SonarQube Backend
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN_BACKEND }}
          SONAR_HOST_URL: https://sonarqube.cpierres.dscloud.me
        working-directory: ./back
        # Ne pas rebuilder ni lancer les tests puisque cela a été fait préalablement avec le "bon JDK 11"
        run: mvn -B sonar:sonar -DskipTests=true -Dsonar.projectKey=cpierres_P10cicd-backend -Dsonar.projectName=P10cicd-backend

      - name: Lien SonarQube Backend
        if: always()
        run: |
          echo "**Rapport SonarQube Backend:** https://sonarqube.cpierres.dscloud.me/dashboard?id=cpierres_P10cicd-backend&codeScope=overall"

  # Job pour la construction de l'image Docker du backend
  backend-docker:
    # Exécuter si les tests ont réussi, indépendamment du résultat de SonarQube
    needs: [backend-tests]
    if: ${{ always() && needs.backend-tests.result == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          context: ./back
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-back:latest

      - name: Commenter la PR avec le lien Docker
        if: github.event_name == 'pull_request' && steps.docker-build.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `✅ **Image Docker Backend déployée avec succès !**
              - **Pull**: \`docker pull cpierres/bobapp-back:latest\`
              - **Lien Docker Hub**: [https://hub.docker.com/repository/docker/cpierres/bobapp-back/general](https://hub.docker.com/repository/docker/cpierres/bobapp-back/general)
              `
            });
