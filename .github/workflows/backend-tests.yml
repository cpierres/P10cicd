# Nom du workflow qui apparaîtra dans l'interface GitHub
name: Backend Tests

# Définit quand le workflow sera déclenché
on:
  # Se déclenche lors d'un push sur la branche main mais uniquement si des fichiers backend sont modifiés
  push:
    branches: [ main ]
    paths:
      - 'back/**'
      - '.github/workflows/backend-tests.yml'
  # Se déclenche lors d'une PR vers la branche main mais uniquement si des fichiers backend sont modifiés
  pull_request:
    branches: [ main ]
    paths:
      - 'back/**'
      - '.github/workflows/backend-tests.yml'
  # Permet de déclencher manuellement le workflow depuis l'interface GitHub
  workflow_dispatch:

# Liste des jobs à exécuter
jobs:
  # Définition du job
  backend-tests:
    # Utilise la dernière version d'Ubuntu comme environnement d'exécution
    runs-on: ubuntu-latest
    # Configure le répertoire de travail par défaut pour les commandes
    defaults:
      run:
        working-directory: ./back

    # Liste des étapes à exécuter dans ce job
    steps:
      # Récupère le code source du dépôt
      - uses: actions/checkout@v4

      # Configure Java 11 pour l'environnement (respect des consignes du projet)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'     # Utiliser JDK 11 comme dans le projet (note : sonar réclame le 17)
          distribution: 'adopt'
          cache: maven           # Active le cache Maven (survit à la destruction du container)

      # compilation séparée pour plus de lisibilité
      - name: Build project
        run: mvn compile test-compile #note : clean initial pas utile puisque démarre vierge

      # Exécute les tests avec Maven (pas de tests d'intégration dans cette appli donc mvn verify inutile)
      - name: Run tests with Maven
        run: mvn test
        continue-on-error: true  # Continuer même si les tests échouent

      # Génère le rapport de couverture JaCoCo
      - name: Generate JaCoCo Report
        run: mvn jacoco:report
        if: always()  # Exécuter même si l'étape précédente échoue

      # Upload rapport JaCoCo comme artefact => stocké dans infra github (sera utile pour job Sonar)
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        if: always()    # S'exécute même si les étapes précédentes échouent
        with:
          name: jacoco-report    # Nom de l'artefact
          path: back/target/site/jacoco/  # Chemin vers les rapports
          retention-days: 1  # inutile de garder plus d'1 jour

      # Afficher le rapport et faire échouer PR éventuellement si en-dessous d'un seuil
      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v5.0
        if: always()  # Exécuter même si les étapes précédentes échouent
        with:
          coverage_results_path: back/target/site/jacoco/jacoco.xml
          coverage_report_name: backend-coverage
          coverage_report_title: JaCoCo Coverage Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false

      - name: Upload backend-classes # partagées avec le job Sonar (classes compilées utiles indépendamment des src)
        uses: actions/upload-artifact@v4
        if: always()  # Exécuter même si les étapes précédentes échouent
        with:
          name: backend-classes
          path: |
            back/target/classes
            back/target/test-classes
          retention-days: 1

      # Publie les résultats des tests JUnit
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'  # Chemin des rapports
          fail_on_failure: false