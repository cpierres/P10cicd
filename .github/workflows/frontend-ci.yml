# Nom du workflow dans l'interface GitHub
name: Frontend CI

# Définit quand le workflow sera déclenché
on:
  # Se déclenche lors d'un push sur la branche main ou les branches de test
  push:
    branches:
      - main
      - workflow-test-front
      - workflow-test-front-*  # branches commençant par workflow-test-front- suivi de n'importe quoi
    paths:
      - front/
      - .github/workflows/frontend-ci.yml
  # Se déclenche lors d'une PR vers la branche main
  pull_request:
    branches: [ main ]
    paths:
      - front/
      - .github/workflows/frontend-ci.yml
  # Permet de déclencher manuellement le workflow
  workflow_dispatch:

# Liste des jobs à exécuter
jobs:
  # Définition du job de tests frontend
  frontend-tests:
    runs-on: ubuntu-latest
    # Configure le répertoire de travail par défaut pour les commandes
    defaults:
      run:
        working-directory: ./front

    # Liste des étapes à exécuter dans l'ordre séquentiel
    steps:
      # Récupère le code source du dépôt (checkout)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Utile pour Sonar pour effectuer des comparaisons

      # Configure l'environnement Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          # Spécifie la version de Node.js du projet
          node-version: '14'
          # Active le cache pour npm pour accélérer les installations futures
          cache: 'npm'
          # Chemin vers le fichier package-lock.json pour la mise en cache des dépendances
          cache-dependency-path: './front/package-lock.json'

      # Installe les dépendances du projet frontend
      # 'npm ci' est similaire à 'npm install' mais plus strict et adapté aux environnements CI
      - name: Install dependencies
        run: npm ci # fait install et le build

      # Exécute les tests du frontend avec les options spécifiées :
      # --no-watch : ne surveille pas les changements de fichiers (mode CI)
      # --no-progress : désactive la barre de progression
      # --browsers=ChromeHeadless : utilise Chrome en mode headless (sans interface graphique)
      # --code-coverage : génère des rapports de couverture de code
      - name: Run tests
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage
        continue-on-error: true  # Continuer même si les tests échouent

      # Upload les rapports de couverture générés comme artefact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()  # Exécuter même si l'étape précédente échoue
        with:
          # Nom de l'artefact qui sera visible dans l'interface GitHub
          name: angular-coverage
          # Chemin vers le dossier contenant les rapports de couverture générés
          path: front/coverage/

  # Job pour l'analyse SonarCloud du frontend
  frontend-sonar:
    needs: [frontend-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Utile car permet à Sonar d'effectuer des comparaisons

      # Récupération des artefacts générés lors des tests frontend
      - name: Téléchargement du rapport de couverture Angular
        uses: actions/download-artifact@v4
        with:
          name: angular-coverage
          path: front/coverage/

      # Analyse SonarCloud pour le frontend uniquement
      - name: Analyse SonarCloud Frontend
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=cpierres_P10cicd-frontend
            -Dsonar.organization=cpierres
            -Dsonar.sources=front/src
            -Dsonar.tests=front/src/app
            -Dsonar.test.inclusions=/*.spec.ts
            -Dsonar.javascript.lcov.reportPaths=front/coverage/lcov.info

      - name: Lien SonarCloud Frontend
        if: always()
        run: |
          echo "**Rapport SonarCloud Frontend:** https://sonarcloud.io/project/overview?id=cpierres_P10cicd-frontend"

  # Job pour la construction de l'image Docker du frontend
  frontend-docker:
    needs: [frontend-sonar]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./front
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-frontend:latest