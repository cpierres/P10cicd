# Nom du workflow dans l'interface GitHub
name: Frontend Tests

on:
  # Se déclenche lors d'un push sur la branche main mais uniquement si des fichiers frontend sont modifiés
  push:
    branches: [ main ]
    paths:
      - 'front/**'
      - '.github/workflows/frontend-tests.yml'
  # Se déclenche lors d'une PR vers la branche main mais uniquement si des fichiers frontend sont modifiés
  pull_request:
    branches: [ main ]
    paths:
      - 'front/**'
      - '.github/workflows/frontend-tests.yml'
  # Permet de déclencher manuellement le workflow depuis l'interface GitHub
  workflow_dispatch:

# Liste des jobs à exécuter
jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    # Configure le répertoire de travail par défaut pour les commandes
    defaults:
      run:
        working-directory: ./front
    
    # Liste des étapes à exécuter dans l'ordre séquentiel
    steps:
      # Récupère le code source du dépôt (checkout)
      - uses: actions/checkout@v4
      
      # Configure l'environnement Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          # Spécifie la version de Node.js du projet
          node-version: '14'
          # Active le cache pour npm pour accélérer les installations futures
          cache: 'npm'
          # Chemin vers le fichier package-lock.json pour la mise en cache des dépendances
          cache-dependency-path: './front/package-lock.json'
      
      # Installe les dépendances du projet frontend
      # 'npm ci' est similaire à 'npm install' mais plus strict et adapté aux environnements CI
      - name: Install dependencies
        run: npm ci # fait install (selon package-lock.json) ET le build !
      
      # Exécute les tests du frontend avec les options spécifiées :
      # --no-watch : ne surveille pas les changements de fichiers (mode CI)
      # --no-progress : désactive la barre de progression
      # --browsers=ChromeHeadless : utilise Chrome en mode headless (sans interface graphique)
      # --code-coverage : génère des rapports de couverture de code
      - name: Run tests
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage
        continue-on-error: true  # Continuer même si les tests échouent
      
      # Upload les rapports de couverture générés comme artefact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()  # Exécuter même si l'étape précédente échoue
        with:
          # Nom de l'artefact qui sera visible dans l'interface GitHub
          name: angular-coverage
          # Chemin vers le dossier contenant les rapports de couverture générés
          path: front/coverage/
          retention-days: 1  # inutile de garder plus d'1 jour