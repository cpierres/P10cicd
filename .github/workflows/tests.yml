# Nom du workflow qui apparaîtra dans l'interface GitHub
name: Run Tests

# Définit quand le workflow sera déclenché
on:
  # Se déclenche lors d'un push sur la branche master
  push:
    branches: [ main ]
  # Se déclenche lors d'une pull request vers la branche master
  pull_request:
    branches: [ main ]

# Liste des jobs à exécuter
jobs:
  # Définition du job "backend-tests"
  backend-tests:
    # Utilise la dernière version d'Ubuntu comme environnement d'exécution
    runs-on: ubuntu-latest
    # Configure le répertoire de travail par défaut pour toutes les commandes
    defaults:
      run:
        working-directory: ./back

    # Liste des étapes à exécuter dans ce job
    steps:
      # Récupère le code source du dépôt
      - uses: actions/checkout@v3

      # Configure Java 11 pour l'environnement
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'    # Utilise AdoptOpenJDK
          cache: maven            # Active le cache Maven

      # Exécute les tests avec Maven
      - name: Run tests with Maven
        run: mvn test

      # Génère le rapport de couverture JaCoCo
      - name: Generate JaCoCo Report
        run: mvn jacoco:report

      # Téléverse le rapport JaCoCo comme artefact
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report    # Nom de l'artefact
          path: back/target/site/jacoco/  # Chemin vers les rapports

      # Publie les résultats des tests JUnit
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()    # S'exécute même si les étapes précédentes échouent
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'  # Chemin des rapports
          fail_on_failure: true  # Échoue si les tests échouent

  # Définition du job pour les tests frontend
  frontend-tests:
    # Spécifie l'environnement d'exécution - utilise la dernière version d'Ubuntu
    runs-on: ubuntu-latest
    # Configure le répertoire de travail par défaut pour toutes les commandes dans ce job
    defaults:
      run:
        working-directory: ./front

    # Liste des étapes à exécuter dans l'ordre séquentiel
    steps:
      # Récupère le code source du dépôt (checkout)
      - uses: actions/checkout@v3

      # Configure l'environnement Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          # Spécifie la version de Node.js à utiliser
          node-version: '14'
          # Active le cache pour npm pour accélérer les installations futures
          cache: 'npm'
          # Chemin vers le fichier package-lock.json pour la mise en cache des dépendances
          cache-dependency-path: './front/package-lock.json'

      # Installe les dépendances du projet frontend
      # 'npm ci' est similaire à 'npm install' mais plus strict et adapté aux environnements CI
      - name: Install dependencies
        run: npm ci

      # Exécute les tests du frontend avec les options spécifiées :
      # --no-watch : ne surveille pas les changements de fichiers (mode CI)
      # --no-progress : désactive la barre de progression
      # --browsers=ChromeHeadless : utilise Chrome en mode headless (sans interface graphique)
      # --code-coverage : génère des rapports de couverture de code
      - name: Run tests
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage

      # Téléverse les rapports de couverture générés comme artefact dans GitHub
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          # Nom de l'artefact qui sera visible dans l'interface GitHub
          name: angular-coverage
          # Chemin vers le dossier contenant les rapports de couverture générés
          path: front/coverage/